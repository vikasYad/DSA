import java.util.*;


public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        LinkedList llist= new LinkedList(); 
        int a1=sc.nextInt();
        Node head= new Node(a1);
        llist.addToTheLast(head);
        for (int i = 1; i < n; i++) 
        {
            int a = sc.nextInt(); 
            llist.addToTheLast(new Node(a));
        }
            
        Solution A = new Solution();
        A.checkLinkedListPalindrome(llist.head);
        
    }
}

class Node
    {
        int data;
        Node next;
        Node(int d) {data = d; next = null; }
    }
    
class LinkedList
{
    Node head;  
    Node tail;
    public void addToTheLast(Node node) 
    {
      if (head == null) 
      {
       head = node;
       tail = node;
      } 
      else 
      {
       tail.next = node;
       tail = node;
      }
    }
      void printList()
    {
        Node temp = head;
        while (temp != null)
        {
           System.out.print(temp.data+" ");
           temp = temp.next;
        }  
        System.out.println();
    }
    
}

class Solution
{
	static Node findMid(Node head){
		Node fast=head;
		Node slow=head;
		while(fast!=null && fast.next!=null){
			slow=slow.next;
			fast=fast.next.next;
		}
        return slow;	
	}
	static Node rev(Node head){
		Node prev=null;
		Node curr=head;
		while(curr!=null){
			Node temp=curr.next;
			curr.next=prev;
			prev=curr;
			curr=temp;
		}
		return prev;
	}
    static void checkLinkedListPalindrome(Node head)
    {
		Node curr=head;
		boolean pallen=true;
		if(head.next==null)
			System.out.print("YES");
        Node mid=findMid(head);
		Node revHead=rev(mid);
		while(revHead!=null){
			if(curr.data!=revHead.data){
					System.out.print("NO");
				pallen=false;
				break;
			}
			curr=curr.next;
			revHead=revHead.next;
		}
		if(pallen)
			System.out.print("YES");
    }
    
}
